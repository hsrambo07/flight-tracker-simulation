<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Flight Path Simulation</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;700&display=swap" rel="stylesheet">
  <style>
    @font-face {
      font-family: 'Perfectly Nineties';
      src: url('https://cdn.jsdelivr.net/gh/sixheads/perfectly-nineties/fonts/PerfectlyNineties-Regular.woff2') format('woff2');
      font-weight: normal;
      font-style: normal;
      font-display: swap;
    }
    /* Base styles */
    *, *::before, *::after {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    
    body, html {
      margin: 0;
      padding: 0;
      height: 100%;
      width: 100%;
      overflow: hidden;
      font-family: Arial, sans-serif;
      background: #201C1A;
      color: #fff;
    }
    
    /* Main layout */
    .app-container {
      display: flex;
      width: 100%;
      height: 100vh;
      overflow: hidden;
    }
    
    /* Map container styles */
    .main-content {
      flex: 1;
      position: relative;
      height: 100%;
      padding: 16px;
    }
    
    #map-container {
      position: relative;
      height: 100%;
      width: 100%;
      background-color: #e9e0d8;
      overflow: hidden;
      border-radius: 8px;
      border: 1px solid #EFEFE8;
    }
    
    #flight-map {
      width: 100%;
      height: 100%;
      position: relative;
    }
    
    /* Sidebar styles */
    .sidebar {
      width: 280px;
      height: 100vh;
      background-color: #100E0D;
      color: #fff;
      overflow: hidden;
      display: flex;
      flex-direction: column;
      box-shadow: inset 0px 1px 2px 0px rgba(0, 0, 0, 0.84);
    }
    
    .sidebar-content {
      flex: 1;
      padding: 16px;
      display: flex;
      flex-direction: column;
    }
    
    .sidebar-header {
      font-size: 24px;
      letter-spacing: 2%;
      margin-bottom: 24px;
      font-family: 'Perfectly Nineties', Arial, sans-serif;
    }
    
    .flights-container {
      flex: 1;
      overflow-y: auto;
      display: flex;
      flex-direction: column;
      gap: 8px;
      scrollbar-width: thin;
      scrollbar-color: #444 #222;
    }
    
    /* Custom scrollbar for modern browsers */
    .flights-container::-webkit-scrollbar {
      width: 6px;
    }
    
    .flights-container::-webkit-scrollbar-track {
      background: #222;
    }
    
    .flights-container::-webkit-scrollbar-thumb {
      background-color: #444;
      border-radius: 3px;
    }
    
    /* Flight card styles */
    .flight-card {
      background-color: #292421;
      border-radius: 4px;
      position: relative;
      overflow: hidden;
    }
    
    .flight-card-content {
      padding: 4px 8px;
      display: flex;
      flex-direction: column;
      gap: 4px;
    }
    
    .color-indicator {
      position: absolute;
      left: 0;
      top: 0;
      bottom: 0;
      width: 2px;
    }
    
    .flight-number {
      font-family: 'JetBrains Mono', monospace;
      font-weight: 700;
      font-size: 14px;
      line-height: 1.45;
    }
    
    .flight-detail, .flight-route {
      display: flex;
      align-items: center;
      justify-content: space-between;
      font-family: 'JetBrains Mono', monospace;
      font-weight: 400;
      font-size: 12px;
      line-height: 1.45;
    }
    
    .flight-route {
      margin-bottom: 0;
    }
    
    /* Header bar */
    .header-bar {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 8px 12px;
      background-color: #fff;
      border-radius: 4px;
      margin-bottom: 24px;
      box-shadow: 0px 1.3px 3.9px 0px rgba(203, 190, 178, 0.55);
      border: 1px solid #EFEEEE;
    }
    
    .app-title-section {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .app-title {
      font-family: 'Perfectly Nineties', Arial, sans-serif;
      font-size: 14px;
      letter-spacing: 1%;
      color: #0E0F11;
    }
    
    .repo-button {
      display: flex;
      align-items: center;
      gap: 2.6px;
      padding: 2.6px 5.2px;
      background-color: rgba(194, 190, 188, 0.2);
      border-radius: 2.6px;
      font-size: 10px;
      color: #736862;
      text-decoration: none;
    }
    
    .repo-button svg {
      width: 12px;
      height: 12px;
      fill: #736862;
    }
    
    /* Sidebar toggle button */
    .sidebar-toggle {
      position: absolute;
      left: -10px;
      top: 50px;
      display: flex;
      justify-content: center;
      align-items: center;
      width: 24px;
      height: 24px;
      background-color: #201C1A;
      border-radius: 50%;
      border: 2px solid #0B0C0D;
      cursor: pointer;
      z-index: 10;
    }
    
    .sidebar-toggle svg {
      width: 16px;
      height: 16px;
      fill: #A5A7AB;
    }
    
    /* Map elements */
    .plane {
      position: absolute;
      opacity: 0.7;
      font-size: 20px;
      font-family: monospace;
      color: #3239be;
      text-shadow: 0 0 2px #fff;
      transform-origin: 50% 50%;
      pointer-events: auto;
      cursor: pointer;
    }
    
    .path {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
    }
    
    .map-feature {
      position: absolute;
      color: #999;
      font-size: 12px;
      pointer-events: none;
    }
    
    .river {
      position: absolute;
      background-color: #a7c4e2;
      opacity: 0.5;
      border-radius: 50%;
      pointer-events: none;
    }
    
    .border {
      position: absolute;
      border-top: 1px dashed #bbb;
      width: 100%;
      pointer-events: none;
    }
    
    .airport {
      position: absolute;
      width: 10px;
      height: 10px;
      margin-left: -5px;
      margin-top: -5px;
      border-radius: 50%;
      background-color: rgba(0, 0, 0, 0.1);
      border: 1px solid #5362c2;
      pointer-events: none;
    }
    
    .airport-label {
      position: absolute;
      font-size: 10px;
      font-weight: bold;
      color: #2f3eb1;
      margin-left: 10px;
      margin-top: 5px;
      text-shadow: 0 0 2px white;
      pointer-events: none;
    }
    
    .tooltip {
      position: absolute;
      background-color: rgba(0, 0, 0, 0.75);
      color: white;
      padding: 5px 8px;
      border-radius: 4px;
      font-size: 12px;
      font-family: 'JetBrains Mono', monospace;
      white-space: nowrap;
      z-index: 100;
      pointer-events: none;
      opacity: 0;
      transition: opacity 0.2s;
    }
  </style>
</head>
<body>

<div class="app-container">
  <div class="main-content">
    <div class="header-bar">
      <div class="app-title-section">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M12 2L2 7L12 12L22 7L12 2Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          <path d="M2 17L12 22L22 17" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          <path d="M2 12L12 17L22 12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
        <span class="app-title">Flight Path Simulation</span>
      </div>
      <a href="#" class="repo-button">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/></svg>
        Repo
      </a>
    </div>
    <div id="map-container">
      <div id="flight-map">
        <!-- Map features will be added here -->
      </div>
    </div>
  </div>
  
  <div class="sidebar">
    <div class="sidebar-content">
      <h1 class="sidebar-header">Recent Flights</h1>
      <div class="flights-container">
        <!-- Flight cards will be added here dynamically -->
      </div>
    </div>
    <div class="sidebar-toggle">
      <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M9 18L15 12L9 6" stroke="#A5A7AB" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    </div>
  </div>
</div>

<script>
// Map configuration
const MAP_WIDTH = window.innerWidth - 280; // Account for sidebar width
const MAP_HEIGHT = window.innerHeight;
const MAP_BOUNDS = {
  west: -100.0,
  east: -80.0,
  south: 35.0,
  north: 45.0
};

// Track animation state
let flightData = [];
let planeDivs = {};
let pathCanvases = {};
let animationRunning = false;
let recentFlights = []; // Store recent flight information for the sidebar

// Add some static map features
function addMapFeatures() {
  const map = document.getElementById('flight-map');
  
  // Add state borders (simple dashed lines)
  const borders = [
    { lat: 41.5, label: "Iowa/Missouri Border" },
    { lat: 40.0, label: "Kansas/Nebraska Border" },
    { lat: 37.0, label: "Oklahoma/Kansas Border" }
  ];
  
  borders.forEach(border => {
    const y = convertLatToY(border.lat);
    const borderDiv = document.createElement('div');
    borderDiv.className = 'border';
    borderDiv.style.top = y + 'px';
    map.appendChild(borderDiv);
  });
  
  // Add city labels
  const cities = [
    { name: "Lincoln", lat: 40.8, lon: -96.7 },
    { name: "Omaha", lat: 41.3, lon: -96.0 },
    { name: "Kansas City", lat: 39.1, lon: -94.6 },
    { name: "Topeka", lat: 39.0, lon: -95.7 },
    { name: "North Platte", lat: 41.1, lon: -100.8 },
    { name: "Salina", lat: 38.8, lon: -97.6 },
    { name: "Saint Joseph", lat: 39.8, lon: -94.8 },
    { name: "Norfolk", lat: 42.0, lon: -97.4 }
  ];
  
  cities.forEach(city => {
    const x = convertLonToX(city.lon);
    const y = convertLatToY(city.lat);
    
    const cityDiv = document.createElement('div');
    cityDiv.className = 'map-feature';
    cityDiv.textContent = city.name;
    cityDiv.style.left = (x + 5) + 'px';
    cityDiv.style.top = y + 'px';
    map.appendChild(cityDiv);
  });
  
  // Add simple rivers (blue dots)
  const rivers = [
    { lat: 41.5, lon: -96.5, size: 15 },
    { lat: 39.5, lon: -95.0, size: 20 },
    { lat: 40.2, lon: -98.5, size: 12 },
    { lat: 38.0, lon: -97.0, size: 18 },
    { lat: 42.0, lon: -97.0, size: 15 },
    { lat: 39.0, lon: -96.0, size: 25 },
    { lat: 38.5, lon: -99.5, size: 15 },
    { lat: 41.2, lon: -95.8, size: 20 },
    { lat: 37.8, lon: -93.5, size: 15 }
  ];
  
  rivers.forEach(river => {
    const x = convertLonToX(river.lon);
    const y = convertLatToY(river.lat);
    
    const riverDiv = document.createElement('div');
    riverDiv.className = 'river';
    riverDiv.style.left = (x - river.size/2) + 'px';
    riverDiv.style.top = (y - river.size/2) + 'px';
    riverDiv.style.width = river.size + 'px';
    riverDiv.style.height = river.size + 'px';
    map.appendChild(riverDiv);
  });
  
  // Add "United States" label
  const usLabelDiv = document.createElement('div');
  usLabelDiv.className = 'map-feature';
  usLabelDiv.textContent = "United States";
  usLabelDiv.style.left = (MAP_WIDTH / 2 - 40) + 'px';
  usLabelDiv.style.top = (MAP_HEIGHT / 2 + 50) + 'px';
  usLabelDiv.style.fontSize = '16px';
  usLabelDiv.style.color = '#999';
  map.appendChild(usLabelDiv);
  
  // Add airports (as landmarks)
  const airports = [
    { code: "MCI", name: "Kansas City Int'l", lat: 39.2976, lon: -94.7139 },
    { code: "STL", name: "St. Louis Lambert", lat: 38.7499, lon: -90.3748 },
    { code: "MSP", name: "Minneapolis–Saint Paul", lat: 44.8848, lon: -93.2223 },
    { code: "OMA", name: "Omaha Eppley", lat: 41.3032, lon: -95.8940 },
    { code: "DSM", name: "Des Moines Int'l", lat: 41.5340, lon: -93.6631 },
    { code: "CLE", name: "Cleveland Hopkins", lat: 41.4124, lon: -81.8498 },
    { code: "IND", name: "Indianapolis Int'l", lat: 39.7169, lon: -86.2956 },
    { code: "CMH", name: "Columbus John Glenn", lat: 39.9999, lon: -82.8872 },
    { code: "PIT", name: "Pittsburgh Int'l", lat: 40.4915, lon: -80.2329 },
    { code: "CVG", name: "Cincinnati/Northern Kentucky", lat: 39.0489, lon: -84.6678 },
    { code: "BNA", name: "Nashville Int'l", lat: 36.1263, lon: -86.6774 },
    { code: "MEM", name: "Memphis Int'l", lat: 35.0420, lon: -89.9792 },
    // Add airports outside the map bounds for flights entering/exiting the region
    { code: "ORD", name: "Chicago O'Hare", lat: 41.9742, lon: -87.9073 },
    { code: "DTW", name: "Detroit Metro", lat: 42.2162, lon: -83.3554 },
    { code: "DFW", name: "Dallas/Fort Worth", lat: 32.8998, lon: -97.0403 },
    { code: "DEN", name: "Denver Int'l", lat: 39.8561, lon: -104.6737 },
    { code: "IAH", name: "Houston George Bush", lat: 29.9902, lon: -95.3368 },
    { code: "ATL", name: "Atlanta Hartsfield-Jackson", lat: 33.6407, lon: -84.4277 }
  ];
  
  // Filter airports that are within the map bounds
  const visibleAirports = airports.filter(airport => {
    return airport.lon >= MAP_BOUNDS.west &&
           airport.lon <= MAP_BOUNDS.east &&
           airport.lat >= MAP_BOUNDS.south &&
           airport.lat <= MAP_BOUNDS.north;
  });
  
  visibleAirports.forEach(airport => {
    const x = convertLonToX(airport.lon);
    const y = convertLatToY(airport.lat);
    
    // Airport marker
    const airportDiv = document.createElement('div');
    airportDiv.className = 'airport';
    airportDiv.style.left = x + 'px';
    airportDiv.style.top = y + 'px';
    map.appendChild(airportDiv);
    
    // Airport label
    const labelDiv = document.createElement('div');
    labelDiv.className = 'airport-label';
    labelDiv.textContent = airport.code;
    labelDiv.style.left = x + 'px';
    labelDiv.style.top = y + 'px';
    map.appendChild(labelDiv);
  });
}

// Convert latitude to Y coordinate
function convertLatToY(lat) {
  const latRange = MAP_BOUNDS.north - MAP_BOUNDS.south;
  const normalizedLat = (MAP_BOUNDS.north - lat) / latRange;
  return normalizedLat * MAP_HEIGHT;
}

// Convert longitude to X coordinate
function convertLonToX(lon) {
  const lonRange = MAP_BOUNDS.east - MAP_BOUNDS.west;
  const normalizedLon = (lon - MAP_BOUNDS.west) / lonRange;
  return normalizedLon * MAP_WIDTH;
}

// Convert coordinates to pixel positions
function coordsToPixels(lat, lon) {
  return {
    x: convertLonToX(lon),
    y: convertLatToY(lat)
  };
}

// bearing in degrees, 0° = North, clockwise positive
function calculateHeading(startLat, startLon, endLat, endLon) {
  const dLon = endLon - startLon;
  const dLat = endLat - startLat;
  let bearing = Math.atan2(dLon, dLat) * 180 / Math.PI;
  return (bearing + 360) % 360;          // normalised 0-359
}

// Create a flight with perfectly straight paths
function createFlight(start, end, color, id, airline, flightNumber) {
  const pathPoints = [];
  const numPoints = 200; // Increase point density for smoother paths
  
  // Calculate points along a perfectly straight line
  for (let j = 0; j < numPoints; j++) {
    const t = j / (numPoints - 1);
    
    // Pure linear interpolation - direct path
    const lat = start.lat + (end.lat - start.lat) * t;
    const lon = start.lon + (end.lon - start.lon) * t;
    
    pathPoints.push({ lat, lon });
  }
  
  // Calculate the exact heading
  const exactHeading = calculateHeading(start.lat, start.lon, end.lat, end.lon);
  
  // Apply same heading to all points
  pathPoints.forEach(point => {
    point.angle = exactHeading;
  });
  
  return {
    id,
    callsign: `${airline}${flightNumber}`,
    origin: start.code,
    destination: end.code,
    path: pathPoints,
    color,
    progress: Math.random(), // Random initial position
    direction: start.lat < end.lat ? 'S → N' : 'N → S' // Determine general direction
  };
}

// Generate random flight data (fewer flights for better performance)
function generateFlights() {
  const flights = [];
  const numRandomFlights = 120; // Reduced for better performance
  
  // Airlines codes
  const airlines = ['AA', 'UA', 'DL', 'WN', 'F9', 'AS', 'NK', 'B6'];
  
  // Standard airport coordinates with some extras to ensure good distribution
  const airports = [
    { code: "MCI", name: "Kansas City", lat: 39.3, lon: -94.7 },
    { code: "STL", name: "St. Louis", lat: 38.7, lon: -90.4 },
    { code: "OMA", name: "Omaha", lat: 41.3, lon: -96.0 },
    { code: "DSM", name: "Des Moines", lat: 41.5, lon: -93.7 },
    { code: "MSP", name: "Minneapolis", lat: 44.9, lon: -93.2 },
    { code: "CMH", name: "Columbus", lat: 40.0, lon: -82.9 },
    { code: "IND", name: "Indianapolis", lat: 39.7, lon: -86.3 },
    { code: "CVG", name: "Cincinnati", lat: 39.0, lon: -84.7 },
    { code: "MEM", name: "Memphis", lat: 35.0, lon: -90.0 }
  ];
  
  // Additional edge airports to ensure coverage of the whole map
  const edgePoints = [
    { code: "NW", name: "Northwest", lat: 44.9, lon: -99.5 },
    { code: "NE", name: "Northeast", lat: 44.9, lon: -80.5 },
    { code: "SW", name: "Southwest", lat: 35.1, lon: -99.5 },
    { code: "SE", name: "Southeast", lat: 35.1, lon: -80.5 },
    { code: "N", name: "North", lat: 44.9, lon: -90.0 },
    { code: "S", name: "South", lat: 35.1, lon: -90.0 },
    { code: "E", name: "East", lat: 40.0, lon: -80.5 },
    { code: "W", name: "West", lat: 40.0, lon: -99.5 },
    { code: "C1", name: "Center1", lat: 42.0, lon: -95.0 },
    { code: "C2", name: "Center2", lat: 38.0, lon: -95.0 },
    { code: "C3", name: "Center3", lat: 40.0, lon: -90.0 },
    { code: "C4", name: "Center4", lat: 40.0, lon: -85.0 }
  ];
  
  // Combine main airports with edge points
  const allPoints = [...airports, ...edgePoints];
  
  // Create routes between airports
  for (let i = 0; i < numRandomFlights; i++) {
    // Pick random origin and destination
    const origin = allPoints[Math.floor(Math.random() * allPoints.length)];
    
    let destination;
    do {
      destination = allPoints[Math.floor(Math.random() * allPoints.length)];
    } while (destination.code === origin.code);
    
    // Create flight object
    const airline = airlines[Math.floor(Math.random() * airlines.length)];
    const flightNumber = Math.floor(Math.random() * 9000) + 1000; // 1000-9999
    const color = getRandomColor(i);
    
    flights.push(createFlight(origin, destination, color, `flight-${i}`, airline, flightNumber));
  }
  
  // Add specific diagonal cross flights for better distribution
  const crossFlights = [
    createFlight(edgePoints[0], edgePoints[3], "#FF9999", "cross-1", "NK", "9758"),
    createFlight(edgePoints[1], edgePoints[2], "#99FF99", "cross-2", "NK", "9758"),
    createFlight(edgePoints[4], edgePoints[5], "#9999FF", "cross-3", "NK", "9758"),
    createFlight(edgePoints[6], edgePoints[7], "#FFFF99", "cross-4", "NK", "9758"),
    createFlight(edgePoints[0], edgePoints[2], "#FF99FF", "cross-5", "NK", "9758"),
    createFlight(edgePoints[1], edgePoints[3], "#99FFFF", "cross-6", "NK", "9758")
  ];
  
  return [...flights, ...crossFlights];
}

// Get a random pastel color
function hexToRgba(hex, alpha = 0.5) {
  // strip leading "#" and expand shorthand (#abc → #aabbcc)
  const h = hex.replace('#', '');
  const bigint = h.length === 3
    ? parseInt(h.split('').map(c => c + c).join(''), 16)
    : parseInt(h, 16);

  const r = (bigint >> 16) & 255;
  const g = (bigint >>  8) & 255;
  const b =  bigint        & 255;

  return `rgba(${r}, ${g}, ${b}, ${alpha})`;
}

function getRandomColor(index, alpha = 0.5) {
  const accessibleColors = [
    '#0072B2', // blue
    '#E69F00', // orange
    '#009E73', // green
    '#CC79A7', // magenta
    '#56B4E9', // sky blue
    '#D55E00', // red-orange
    '#F0E442', // yellow
    '#6d2dac'  // deep purple
  ];
  return hexToRgba(accessibleColors[index % accessibleColors.length], alpha);
}

// Create a plane element
function createPlane(flight) {
  const map = document.getElementById('flight-map');
  
  // Create plane element
  const plane = document.createElement('div');
  plane.id = flight.id;
  plane.className = 'plane';
  plane.textContent = '*';                // ← ASCII plane nose-up baseline
  
  // Add data attributes for tooltip
  plane.dataset.callsign = flight.callsign;
  plane.dataset.origin = flight.origin;
  plane.dataset.destination = flight.destination;
  
  // Get the initial point
  const initialPoint = flight.path[0];
  
  // Set initial rotation
  plane.style.transform = `translate(-50%, -50%) rotate(${initialPoint.angle}deg)`;
  
  // Position at initial point
  const pixelPos = coordsToPixels(initialPoint.lat, initialPoint.lon);
  plane.style.left = pixelPos.x + 'px';
  plane.style.top = pixelPos.y + 'px';
  
  // Add hover event listeners
  plane.addEventListener('mouseenter', showTooltip);
  plane.addEventListener('mouseleave', hideTooltip);
  
  map.appendChild(plane);
  return plane;
}

// Create a canvas for drawing the flight path
function createPathCanvas(flight) {
  const map = document.getElementById('flight-map');
  
  // Create canvas for the flight path
  const canvas = document.createElement('canvas');
  canvas.width = MAP_WIDTH;
  canvas.height = MAP_HEIGHT;
  canvas.className = 'path';
  canvas.id = `path-${flight.id}`;
  
  map.appendChild(canvas);
  return canvas;
}

// Draw the flight path with trailing effect
function drawFlightPath(canvas, flight, progress) {
  const ctx = canvas.getContext('2d');
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  
  // Calculate the visible portion of the path (trailing effect)
  const trailLength = 0.24; // How much of the path to show behind the plane
  const startProgress = Math.max(0, progress - trailLength);
  
  // Find the start and end indices in the path array
  const startIdx = Math.floor(startProgress * (flight.path.length - 1));
  const endIdx = Math.floor(progress * (flight.path.length - 1));
  
  if (endIdx <= startIdx) return;
  
  // Draw the path with improved visibility
  ctx.beginPath();
  ctx.strokeStyle = flight.color;
  ctx.lineWidth = 2.0; // Increased thickness for better visibility
  ctx.setLineDash([4, 8]); // More visible dot spacing
  
  // Start point
  const startPoint = flight.path[startIdx];
  const startPixels = coordsToPixels(startPoint.lat, startPoint.lon);
  ctx.moveTo(startPixels.x, startPixels.y);
  
  // Draw line through all points in between
  for (let i = startIdx + 1; i <= endIdx; i++) {
    const point = flight.path[i];
    const pixels = coordsToPixels(point.lat, point.lon);
    ctx.lineTo(pixels.x, pixels.y);
  }
  
  ctx.stroke();
}

// Create a flight card in the sidebar
function createFlightCard(flight, flightInfo) {
  const { altitude, groundSpeed, heading } = flightInfo;
  
  const card = document.createElement('div');
  card.className = 'flight-card';
  card.id = `card-${flight.id}`;
  
  // Get the color for the left border
  const solidColor = flight.color.replace('rgba', 'rgb').replace(/, [0-9.]+\)/, ')');
  
  card.innerHTML = `
    <div class="color-indicator" style="background-color: ${solidColor}"></div>
    <div class="flight-card-content">
      <div class="flight-number">${flight.callsign}</div>
      <div class="flight-route">
        <span>${flight.direction}</span>
      </div>
      <div class="flight-detail">
        <span>ALT:</span>
        <span class="alt-value">${altitude.toLocaleString()} ft</span>
      </div>
      <div class="flight-detail">
        <span>SPD:</span>
        <span class="spd-value">${groundSpeed} kts</span>
      </div>
      <div class="flight-detail">
        <span>HDG:</span>
        <span class="hdg-value">${heading}°</span>
      </div>
    </div>
  `;
  
  return card;
}

// Update an existing flight card if it's displayed
function updateFlightCardIfDisplayed(flight, flightInfo) {
  const card = document.getElementById(`card-${flight.id}`);
  if (card) {
    const altElement = card.querySelector('.alt-value');
    const spdElement = card.querySelector('.spd-value');
    const hdgElement = card.querySelector('.hdg-value');
    
    if (altElement) altElement.textContent = `${flightInfo.altitude.toLocaleString()} ft`;
    if (spdElement) spdElement.textContent = `${flightInfo.groundSpeed} kts`;
    if (hdgElement) hdgElement.textContent = `${flightInfo.heading}°`;
  }
}

// Calculate flight information based on progress
function calculateFlightInfo(flight, progress) {
  // Find exact position in the flight path
  const exactIndex = progress * (flight.path.length - 1);
  const index = Math.floor(exactIndex);
  
  // Get current point
  const currentPoint = flight.path[index];
  
  // Calculate simulated altitude based on flight progress
  let altitude;
  if (progress < 0.1) {
    // Climbing
    altitude = Math.floor(progress * 10 * 35000);
  } else if (progress > 0.9) {
    // Descending
    altitude = Math.floor((1 - progress) * 10 * 35000);
  } else {
    // Cruising with slight variations
    altitude = 35000 + Math.floor(Math.sin(progress * 10) * 600);
  }
  
  // Calculate ground speed (knots) - realistic for jet aircraft
  const speedFactor = 1 - 0.3 * Math.sin(progress * Math.PI); // slower at takeoff/landing
  const groundSpeed = Math.floor(400 + speedFactor * 150);
  
  // Heading is already calculated
  const heading = Math.round(currentPoint.angle);
  
  return { altitude, groundSpeed, heading };
}

// Animation loop with linear movement
function animateFlights() {
  // Animation duration in seconds
  const cycleDuration = 480; // 8 minutes
  
  // Calculate current progress based on timestamp
  const now = Date.now() / 1000; // Current time in seconds
  const globalProgress = (now % cycleDuration) / cycleDuration;
  
  // Update each flight
  flightData.forEach(flight => {
    // Each flight has a slight offset for variety, but always between 0-1
    const flightProgress = (globalProgress + flight.progress) % 1;
    
    // Get the plane and path elements
    const plane = planeDivs[flight.id];
    const pathCanvas = pathCanvases[flight.id];
    
    // Calculate flight info (altitude, speed, etc.)
    const flightInfo = calculateFlightInfo(flight, flightProgress);
    
    // Update plane position - now using direct style updates without transitions
    updatePlanePosition(plane, flight, flightProgress);
    
    // Update flight path
    drawFlightPath(pathCanvas, flight, flightProgress);
    
    // Update the flight info if it's being displayed in the sidebar
    updateFlightCardIfDisplayed(flight, flightInfo);
  });
  
  // Continue animation loop
  requestAnimationFrame(animateFlights);
}

// Show tooltip with flight information
function showTooltip(event) {
  const plane = event.target;
  
  // Get current flight data
  const flightId = plane.id;
  const flight = flightData.find(f => f.id === flightId);
  
  if (!flight) return;
  
  // Find current position in the path
  const now = Date.now() / 1000;
  const cycleDuration = 480;
  const globalProgress = (now % cycleDuration) / cycleDuration;
  const flightProgress = (globalProgress + flight.progress) % 1;
  
  // Get flight info
  const flightInfo = calculateFlightInfo(flight, flightProgress);
  
  // Create or get tooltip element
  let tooltip = document.getElementById('tooltip');
  if (!tooltip) {
    tooltip = document.createElement('div');
    tooltip.id = 'tooltip';
    tooltip.className = 'tooltip';
    document.body.appendChild(tooltip);
  }
  
  // Update tooltip content with color indicator
  tooltip.innerHTML = `
    <div style="border-left: 4px solid ${flight.color}; padding-left: 6px;">
      <strong>${flight.callsign}</strong><br>
      ${flight.origin} → ${flight.destination}<br>
      ALT: ${flightInfo.altitude.toLocaleString()} ft<br>
      SPD: ${flightInfo.groundSpeed} kts<br>
      HDG: ${flightInfo.heading}°
    </div>
  `;
  
  // Position tooltip above the plane
  const planeRect = plane.getBoundingClientRect();
  tooltip.style.left = `${planeRect.left + planeRect.width/2}px`;
  tooltip.style.top = `${planeRect.top - tooltip.offsetHeight - 10}px`;
  tooltip.style.transform = 'translateX(-50%)';
  tooltip.style.opacity = '1';
}

// Hide tooltip
function hideTooltip() {
  const tooltip = document.getElementById('tooltip');
  if (tooltip) {
    tooltip.style.opacity = '0';
  }
}

// Update the position of a plane with direct positioning, no CSS transitions
function updatePlanePosition(plane, flight, progress) {
  // Find exact position in the flight path
  const exactIndex = progress * (flight.path.length - 1);
  const index = Math.floor(exactIndex);
  const nextIndex = Math.min(index + 1, flight.path.length - 1);
  
  // Calculate precise interpolation factor
  const t = exactIndex - index;
  
  // Get the current and next points
  const currentPoint = flight.path[index];
  const nextPoint = flight.path[nextIndex];
  
  // Precise linear interpolation between points
  const lat = currentPoint.lat + (nextPoint.lat - currentPoint.lat) * t;
  const lon = currentPoint.lon + (nextPoint.lon - currentPoint.lon) * t;
  
  // Use the pre-calculated angle
  const angle = currentPoint.angle;
  
  // Convert to screen coordinates
  const pixels = coordsToPixels(lat, lon);
  
  // Apply position and rotation directly
  plane.style.left = pixels.x + 'px';
  plane.style.top = pixels.y + 'px';
  plane.style.transform = `translate(-50%, -50%) rotate(${angle}deg)`;
  
  // Update tooltip position if it's visible for this plane
  const tooltip = document.getElementById('tooltip');
  if (tooltip && tooltip.style.opacity === '1' && document.querySelector(':hover') === plane) {
    // If this plane is being hovered, update the tooltip position
    const planeRect = plane.getBoundingClientRect();
    tooltip.style.left = `${planeRect.left + planeRect.width/2}px`;
    tooltip.style.top = `${planeRect.top - tooltip.offsetHeight - 10}px`;
  }
}

// Handle window resize
function handleResize() {
  location.reload(); // Simplest way to handle resize for this demo
}

// Initialize the map and flights
function initializeMap() {
  // Add map features (borders, cities, etc.)
  addMapFeatures();
  
  // Generate flight data
  flightData = generateFlights();
  
  // Create plane and path elements for each flight
  flightData.forEach(flight => {
    // Create and store plane element
    planeDivs[flight.id] = createPlane(flight);
    
    // Create and store path canvas
    pathCanvases[flight.id] = createPathCanvas(flight);
  });
  
  // Initialize the Recent Flights panel with fixed flights
  initializeRecentFlights();
  
  // Start animation
  if (!animationRunning) {
    animationRunning = true;
    animateFlights();
  }
  
  // Add resize listener
  window.addEventListener('resize', handleResize);
}

// Initialize when the page loads
window.addEventListener('load', initializeMap);

// Initialize permanent flights in the sidebar
function initializeRecentFlights() {
  // Create fixed flight data with specific airlines and numbers
  const fixedFlights = [
    { callsign: "NK9758", direction: "N → S", color: "#40956D" },
    { callsign: "NK9758", direction: "N → S", color: "#958F40" },
    { callsign: "NK9758", direction: "N → S", color: "#F3507E" },
    { callsign: "NK9758", direction: "N → S", color: "#409568" },
    { callsign: "NK9758", direction: "N → S", color: "#958F40" },
    { callsign: "NK9758", direction: "N → S", color: "#C9D482" },
    { callsign: "NK9758", direction: "N → S", color: "#958F40" }
  ];
  
  // Find some flights that match our criteria
  const selectedFlights = [];
  
  for (let i = 0; i < Math.min(7, flightData.length); i++) {
    selectedFlights.push(flightData[i]);
  }
  
  // Display the selected flights in the sidebar with fixed data
  const container = document.querySelector('.flights-container');
  container.innerHTML = '';
  
  for (let i = 0; i < Math.min(fixedFlights.length, selectedFlights.length); i++) {
    const flight = selectedFlights[i];
    
    // Override with fixed data
    flight.callsign = fixedFlights[i].callsign;
    flight.direction = fixedFlights[i].direction;
    flight.color = fixedFlights[i].color;
    
    const flightProgress = Math.random(); // Random initial position
    const flightInfo = {
      altitude: 35546,
      groundSpeed: 35236,
      heading: 180
    };
    
    const card = createFlightCard(flight, flightInfo);
    container.appendChild(card);
    
    // Store this flight for later reference
    recentFlights.push({
      flight,
      flightInfo,
      timestamp: Date.now()
    });
  }
}
</script>
</body>
</html>
